import { applyIfNotNil } from '../';
describe('applyIfNotNil', function () {
  it('should call fn when exist', function () {
    var fn = jest.fn();
    applyIfNotNil(fn, []);
    expect(fn).toHaveBeenCalled();
  });
  it('should not call fn when undefined', function () {
    var fn = undefined;
    expect(applyIfNotNil(fn, [])).toBe(null);
  });
  it('should call fn with arguments', function () {
    var fn = jest.fn();
    applyIfNotNil(fn, [1, 2, 3]);
    expect(fn).toHaveBeenCalledWith(1, 2, 3);
  });
  it('should return result from fn', function () {
    var fn = jest.fn(function (arg) {
      return arg;
    });
    expect(applyIfNotNil(fn, [1])).toBe(1);
  });
  it('should support currying', function () {
    var fn = jest.fn();
    var curry = applyIfNotNil(fn);
    curry([6, 2]);
    expect(fn).toHaveBeenCalledWith(6, 2);
  });
});