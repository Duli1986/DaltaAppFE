import { concat, always } from 'ramda';
import defaultArgs from '../defaulArgs';
describe('defaultArgs', function () {
  var calledFn = function calledFn() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args;
  };

  it('should default arguments - args and input same length', function () {
    expect(defaultArgs(['default1', 'default2'], calledFn)(undefined, 'defined')).toEqual(['default1', 'defined']);
  });
  it('should default arguments - args are bigger than input', function () {
    expect(defaultArgs(['default1', 'default2', 'default3'], calledFn)(undefined, 'defined')).toEqual(['default1', 'defined', 'default3']);
  });
  it('should default arguments - input is bigger than args', function () {
    expect(defaultArgs(['default1', 'default2'], calledFn)(undefined, 'defined', 'also defined')).toEqual(['default1', 'defined', 'also defined']);
  });
  it('should be ac when used on concat', function () {
    expect(defaultArgs(['a', 'b'], concat)(undefined, 'c')).toEqual('ac');
  });
  it('should be {} when used on always', function () {
    expect(defaultArgs([{}], always)(undefined)()).toEqual({});
  });
});