import camelizeKeys from '../camelizeKeys';
describe('camelizeKeys', function () {
  it('should handle objects', function () {
    return expect(camelizeKeys({
      'foo-bar': '',
      'foo-baz': ''
    })).toEqual({
      fooBar: '',
      fooBaz: ''
    });
  });
  it('should handle objects recursively', function () {
    return expect(camelizeKeys({
      'foo-bar': '',
      'foo-baz': {
        'foo-bar': '',
        'foo-baz': ''
      }
    })).toEqual({
      fooBar: '',
      fooBaz: {
        fooBar: '',
        fooBaz: ''
      }
    });
  });
  it('should handle functions as values in objects', function () {
    var fn = function fn() {};

    expect(camelizeKeys({
      'foo-bar': '',
      'foo-baz': fn
    })).toEqual({
      fooBar: '',
      fooBaz: fn
    });
  });
  it('should handle primitive types as values in objects', function () {
    return expect(camelizeKeys({
      'foo-bar': '',
      'foo-baz': 1,
      'foo-boo': true
    })).toEqual({
      fooBar: '',
      fooBaz: 1,
      fooBoo: true
    });
  });
  it('should handle arrays', function () {
    return expect(camelizeKeys([{
      'foo-bar': ''
    }, {
      'foo-bar': ''
    }])).toEqual([{
      fooBar: ''
    }, {
      fooBar: ''
    }]);
  });
  it('should handle arrays recursively', function () {
    return expect(camelizeKeys([{
      'foo-bar': ''
    }, {
      'foo-bar': ''
    }, [{
      'foo-bar': ''
    }, {
      'foo-bar': ''
    }]])).toEqual([{
      fooBar: ''
    }, {
      fooBar: ''
    }, [{
      fooBar: ''
    }, {
      fooBar: ''
    }]]);
  });
});